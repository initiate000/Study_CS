# 散列表（哈希表、字典）
内部机制：实现、冲突、散列函数

散列表适合用于模拟映射关系、防止重复、缓存/记住数据，以免服务器再通过处理来生成它们。

冲突：给两个键分配了相同的位置。避免冲突的方法：较低的装填因子、良好的散列函数。

装填因子 = 散列表包含的元素数 / 位置总数。散列表使用数组来存储数据，因此需要计算数组中被占用的位置总数。当装填因子增大时，需要在散列表中添加位置，即调整长度。装填因子越低，发生冲突的可能性越小，散列表的性能就越高。一般情况下，当散列表的装填因子大于0.7时，就需要调整散列表的长度，并对原来的散列表中的所有元素用hash()函数重新插入到新的散列表中。
 